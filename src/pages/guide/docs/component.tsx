import { inject, useRef } from '@viewfly/core'
import { ViewUpdateInjectionToken } from '../injection-tokens'
export default function() {
  const subject = inject(ViewUpdateInjectionToken)
  const ref = useRef(node => {
    subject.next(node as HTMLElement)
  })
  return function() {
    return (
      <div ref={ref}><h1>组件</h1>
<p>什么是 Viewfly 的组件？组件是由组件主体和一个渲染函数组成。其结构如下：</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">// 组件主体</span></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-comment">// 渲染函数</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;content&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p>其中，组件主体只会执行一次，直至销毁，而渲染函数则会随着数据的更改，执行多次。我们应当把组件主要的逻辑都编辑在组件主体内，让渲染函数只负责视图的生成。</p>
<p>渲染函数可以返回一个虚拟 DOM 节点，也可以返回一个组件（<code>&lt;Component/&gt;</code>）或文档片段（<code>&lt;&gt;&lt;/&gt;</code>），在有的情况下，我们可能不需要生成视图，这时，也可以不返回，或返回 null。</p>
<h2>如何触发组件更新</h2>
<p>Viewfly 采用依赖收集的方式实现组件更新，当 Viewfly 调用渲染函数时，会记录渲染过程中使用到的 Siganl 并记录下来，当这些记录下来的一个或多个 Signal 数据产生变化时，则会触发组件重新渲染。需要注意的是，组件的渲染是异步的，所以当你改变了某一个 Signal 的值时，并不能立即获取到最新的渲染结果。</p>
<p>下面的组件会间隔一秒更新一次，并在控制台打印日志。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;count =&nbsp;<span class="tb-hl-function">useSignal</span>(<span class="tb-hl-number">0</span>)</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-function">setInterval</span>(() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;count.<span class="tb-hl-function">set</span>(<span class="tb-hl-function">count</span>() +&nbsp;<span class="tb-hl-number">1</span>)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'},&nbsp;<span class="tb-hl-number">1000</span>)</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;console.<span class="tb-hl-function">log</span>(<span class="tb-hl-string">`count is&nbsp;</span>${'{'}<span class="tb-hl-function">count</span>(){'}'}<span class="tb-hl-string">`</span>)</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;{'{'}<span class="tb-hl-function">count</span>(){'}'}&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p>下面的组件只会渲染一次，因为渲染函数并没有对变化的 Signal 产生依赖。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;count =&nbsp;<span class="tb-hl-function">useSignal</span>(<span class="tb-hl-number">0</span>)</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;name =&nbsp;<span class="tb-hl-function">useSignal</span>(<span class="tb-hl-string">'jack'</span>)</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-function">setInterval</span>(() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;count.<span class="tb-hl-function">set</span>(<span class="tb-hl-function">count</span>() +&nbsp;<span class="tb-hl-number">1</span>)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'},&nbsp;<span class="tb-hl-number">1000</span>)</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;console.<span class="tb-hl-function">log</span>(<span class="tb-hl-string">`name is&nbsp;</span>${'{'}<span class="tb-hl-function">name</span>(){'}'}<span class="tb-hl-string">`</span>)</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;{'{'}<span class="tb-hl-function">name</span>(){'}'}&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<h2>组件属性</h2>
<p>当组件一部分数据需要由使用它的地方确定时，我们可以通过组件属性（Props）传递给子组件。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">Button</span>(props) {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">button&nbsp;</span><span class="tb-hl-attr-name">type</span>={'{'}props.type{'}'}<span class="tb-hl-tag">&nbsp;</span><span class="tb-hl-attr-name">onClick</span>={'{'}props.onClick{'}'}&gt;Button&lt;/<span class="tb-hl-tag">button</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">childClick</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;console.<span class="tb-hl-function">log</span>(<span class="tb-hl-string">'子组件被点击了'</span>)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-class-name">Button</span><span class="tb-hl-tag">&nbsp;</span><span class="tb-hl-attr-name">type</span>="<span class="tb-hl-attr-value">button</span>"<span class="tb-hl-tag">&nbsp;</span><span class="tb-hl-attr-name">onClick</span>={'{'}childClick{'}'}/&gt;</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p>当父组件传给子组件的属性产生变化时，子组件总是可以通过 props 获取最父组件传入的数据，但当我们把 props 通过 ...props 解构后，将只能拿到初始的值。这是因为，解构后，props 的属性就变成了一个本地变量，而不是一个响应式的对象了。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">Button</span>({'{'}type, onClick{'}'}) {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">// type 和 onClick 不会再更新</span></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">button&nbsp;</span><span class="tb-hl-attr-name">type</span>={'{'}props.type{'}'}<span class="tb-hl-tag">&nbsp;</span><span class="tb-hl-attr-name">onClick</span>={'{'}props.onClick{'}'}&gt;Button&lt;/<span class="tb-hl-tag">button</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">childClick</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;console.<span class="tb-hl-function">log</span>(<span class="tb-hl-string">'子组件被点击了'</span>)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-class-name">Button</span><span class="tb-hl-tag">&nbsp;</span><span class="tb-hl-attr-name">type</span>="<span class="tb-hl-attr-value">button</span>"<span class="tb-hl-tag">&nbsp;</span><span class="tb-hl-attr-name">onClick</span>={'{'}childClick{'}'}/&gt;</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<h2>组件插槽</h2>
<p>在我们写 HTML 时，大多数标签都可以在标签内再嵌入子元素，这在组件中，也是可以实现的。我们在任意组件内嵌套的元素，总是会在 props 的 children 字段中。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">Child</span>(props) {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;&lt;<span class="tb-hl-tag">p</span>&gt;{'{'}props.children{'}'}&lt;/<span class="tb-hl-tag">p</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-class-name">Child</span>&gt;Text from Parent Component.&lt;/<span class="tb-hl-class-name">Child</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p>有时我们可能需要给子组件传递更多的文档片段，只靠 children 就满足不了我们的需求，这时，子组件可以对外提供更多的选项，供父组件传入。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">Child</span>(props) {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">class</span>="<span class="tb-hl-attr-value">heading</span>"&gt;{'{'}props.heading{'}'}&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">class</span>="<span class="tb-hl-attr-value">content</span>"&gt;{'{'}props.children{'}'}&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-class-name">Child</span><span class="tb-hl-tag">&nbsp;</span><span class="tb-hl-attr-name">heading</span>={'{'}&lt;<span class="tb-hl-tag">h1</span>&gt;heading&lt;/<span class="tb-hl-tag">h1</span>&gt;{'}'}&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Text from Parent Component.</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-class-name">Child</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<h2>条件渲染</h2>
<p>当我们根据特定的条件渲染视图时，我们可以在 jsx 中嵌入条件语句来实现。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;count =&nbsp;<span class="tb-hl-function">useSignal</span>(<span class="tb-hl-number">0</span>)</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">increment</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;count.<span class="tb-hl-function">set</span>(<span class="tb-hl-function">count</span>() +&nbsp;<span class="tb-hl-number">1</span>)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; &nbsp;{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-function">count</span>() %&nbsp;<span class="tb-hl-number">2</span>&nbsp;? &lt;<span class="tb-hl-tag">div</span>&gt;count is even&lt;/<span class="tb-hl-tag">div</span>&gt; : &lt;<span class="tb-hl-tag">p</span>&gt;count is odd&lt;/<span class="tb-hl-tag">p</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">button&nbsp;</span><span class="tb-hl-attr-name">type</span>="<span class="tb-hl-attr-value">button</span>"<span class="tb-hl-tag">&nbsp;</span><span class="tb-hl-attr-name">onClick</span>={'{'}increment{'}'}&gt;点我加&nbsp;<span class="tb-hl-number">1</span>&lt;/<span class="tb-hl-tag">button</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p>条件判断除了可以返回虚拟 DOM 节点外，也可以返回字符串或 null，返回 null，Viewfly 会忽略 null 和 undefiend 的渲染。</p>
<h2>循环渲染</h2>
<p>当我们需要渲染一组数据时，这里全靠手写就会变得不现实，且数据个数可能是不固定的，这时，采用循环就很有必要了。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;colors = [<span class="tb-hl-string">'blue'</span>,&nbsp;<span class="tb-hl-string">'yellow'</span>,&nbsp;<span class="tb-hl-string">'red'</span>,&nbsp;<span class="tb-hl-string">'pink'</span>]</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors.<span class="tb-hl-function">map</span>((color, index) =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;&lt;<span class="tb-hl-tag">p</span>&gt;第 {'{'}index +&nbsp;<span class="tb-hl-number">1</span>{'}'} 个颜色为：{'{'}color{'}'}&lt;/<span class="tb-hl-tag">p</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{'}'})</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<h2>渲染文档片段</h2>
<p>有时我们需要重复一段结构，却不想为这一段结构添加额外的父节点，但循环渲染却不能返回两个节点，这时，Fragment 将会是一个好选择。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;colors = [<span class="tb-hl-string">'blue'</span>,&nbsp;<span class="tb-hl-string">'yellow'</span>,&nbsp;<span class="tb-hl-string">'red'</span>,&nbsp;<span class="tb-hl-string">'pink'</span>]</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors.<span class="tb-hl-function">map</span>((color, index) =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">p</span>&gt;这是第 {'{'}index +&nbsp;<span class="tb-hl-number">1</span>{'}'} 个颜色&lt;/<span class="tb-hl-tag">p</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">p</span>&gt;它的值为：{'{'}color{'}'}&lt;/<span class="tb-hl-tag">p</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{'}'})</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p>Fragment 不仅可以在循环中使用，也可在以其它地方使用，甚至组件的根节点，也可以是一个 Fragment。</p>
<tb-alert data-type="info" class="tb-alert tb-alert-info">
  <div><strong>小提示：</strong>Fragment 本质是一个组件，它由 Viewfly 内核实现，Fragment 不生成任何 DOM 节点，也没有任何功能。仅仅是作为一个组装一组子节点的语法糖。</div>
</tb-alert>
<h2>style 渲染</h2>
<p>style 支持一个字符器或一个简单对象，当值要根据数据动态取值是，对象是一个好选择。需要注意的是，Viewfly 默认不会添加单位，如像素值只能写成字符串 50px 而不是数字 50。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;height =&nbsp;<span class="tb-hl-function">useSignal</span>()</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">increaseHeight</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;height.<span class="tb-hl-function">set</span>(<span class="tb-hl-function">height</span>() +&nbsp;<span class="tb-hl-number">10</span>)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">onClick</span>={'{'}increaseHeight{'}'}&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div style={'{'}{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;<span class="tb-hl-function">height</span>() +&nbsp;<span class="tb-hl-string">'px'</span>,</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;<span class="tb-hl-string">'green'</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{'}'}{'}'}&gt;text&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">style</span>="<span class="tb-hl-attr-name">border</span>: 1px solid #ccc"&gt;text&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<h2>class 渲染</h2>
<p>Viewfly 中，class 可以支持普通字符串、对象、字符串或对象的数组。当为对象时，Viewfly 会遍历传入的对象，当 key 对应的值为 true 时，Viewfly 将把 key 作为 class 名字渲染进最终结果中。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;isShow =&nbsp;<span class="tb-hl-function">useSignal</span>(<span class="tb-hl-boolean">false</span>)</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">class</span>="<span class="tb-hl-attr-value">container box</span>"&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">class</span>={'{'}[<span class="tb-hl-string">'nav'</span>,&nbsp;<span class="tb-hl-string">'bg-gray'</span>]{'}'}&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数组</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">class</span>={'{'}{'{'}'content':&nbsp;<span class="tb-hl-boolean">true</span>, 'is-show':&nbsp;<span class="tb-hl-function">isShow</span>(){'}'}{'}'}&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对象</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">class</span>={'{'}[<span class="tb-hl-string">'footer'</span>, {'{'}'active':&nbsp;<span class="tb-hl-function">isShow</span>(){'}'}]{'}'}&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数组和对象组合</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p><br/></p>
<h1>Hooks</h1>
<p>hooks 总是以 useXXX 的形式出现，通过灵活的组织 hooks ，可以帮助我们动态管理应用的数据，并可以获得实时响应的效果。</p>
<h2>useSignal() 状态管理</h2>
<p>在 Viewfly 中，Signal 是用于管理数据的核心能力，任何响应式的数据，都必须直接或间接的通过 Signal 管理。Signal 本质是一个 getter 和 setter 的组合体。通过调用 Signal 函数，可以获取最新的值，通过 signal.set() 可以更新 Signal 的值，并且，如果有组件在渲染函数中依赖了 Signal，那么，当 Signal 的值发生变化时，该组件也会自动重新渲染，并更新 DOM。</p>
<p>Signal 不一定要声明在组件内，也可以完全声明在组件外的任何地方。所以，当你有多个组件需要共享一份数据时，你完全可以在一个公共的文件，创建好共享数据的 Signal ，再在组件内引用，当 Signal 的值发生变更时，所有在渲染时依赖了该 Signal 的组件都会得到更新。</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">const</span>&nbsp;commonState =&nbsp;<span class="tb-hl-function">useSignal</span>(<span class="tb-hl-string">'old state!'</span>)</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">Child</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">updateState</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;commonState.<span class="tb-hl-function">set</span>(<span class="tb-hl-string">'new state!'</span>)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">p</span>&gt;child:{'{'}<span class="tb-hl-function">commonState</span>(){'}'}&lt;/<span class="tb-hl-tag">p</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">button&nbsp;</span><span class="tb-hl-attr-name">onClick</span>={'{'}updateState{'}'}&gt;update state&lt;/<span class="tb-hl-tag">button</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;state: {'{'}<span class="tb-hl-function">commonState</span>(){'}'}&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-class-name">Child</span>/&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-function">createApp</span>(document.<span class="tb-hl-function">getElementById</span>(<span class="tb-hl-string">'app'</span>), &lt;<span class="tb-hl-class-name">App</span>/&gt;)</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p>注意：Signal 对相同的值，不会触发更新，而是会直接忽略掉。当你用 Signal 管理一个对象时，如果仅修改了对象的属性，并重新 set 此对象，由于引用一致，Viewfly 将无法区分该对象到底有没有更改。如：</p><pre lang="Jsx" theme="dark" class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">const</span>&nbsp;user =&nbsp;<span class="tb-hl-function">useSignal</span>({'{'}name:&nbsp;<span class="tb-hl-string">'Bob'</span>, age:&nbsp;<span class="tb-hl-number">23</span>{'}'})</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">updateUserName</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;state =&nbsp;<span class="tb-hl-function">user</span>()</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-comment">// 此外设置将不会引起更新，因为 state 的引用没有发生变化</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;state.name =&nbsp;<span class="tb-hl-string">'Jack'</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;user.<span class="tb-hl-function">set</span>(state)</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-comment">// 正确的方法如下</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;user.<span class="tb-hl-function">set</span>({'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...state,</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;<span class="tb-hl-string">'Jack'</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;{'}'})</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;(</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">div</span>&gt;username：{'{'}<span class="tb-hl-function">user</span>().name{'}'}&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span class="tb-hl-tag">button&nbsp;</span><span class="tb-hl-attr-name">onClick</span>={'{'}updateUserName{'}'}&gt;update username&lt;/<span class="tb-hl-tag">button</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;)</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<tb-alert data-type="info" class="tb-alert tb-alert-info">
  <div><strong style="color:#1276cc">小知识：</strong>由于 Signal 的灵活性，Viewfly 本质上不需要类似 store 的数据管理方案，仅需对 Signal 简单的封装，即可完成复杂数据管理的能力。Viewfly 也在 @viewfly/hooks 包里，提供了 useProduce 勾子，可以方便的管理复杂对象。</div>
</tb-alert>
<h2>useEffect() 数据监听</h2>
<p><br/></p></div>
    )
  }
}