import { inject, useRef } from '@viewfly/core'
import { ViewUpdateInjectionToken } from '../injection-tokens'
export default function() {
  const subject = inject(ViewUpdateInjectionToken)
  const ref = useRef(node => {
    subject.next(node as HTMLElement)
  })
  return function() {
    return (
      <div ref={ref}><h1>模块化 CSS</h1>
<h2>安装依赖</h2>
<p>在应用开发中，模块化 css 是可以帮助我们解决样式 命名冲突的问题，要使用模块化 css，需先装对应的 webpack loader。</p><pre lang="" theme="starry" class="tb-pre tb-pre-hide-line-number"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line">npm install @viewfly/devtools -D</div></div><span class="tb-pre-lang"></span></div></pre>
<p>然后在 webpack 配置项中，替换 css-loader。</p><pre lang="JavaScript" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line">{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;test: /\.css$/,</div><div class="tb-code-line">&nbsp;&nbsp;use: [</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-string">'style-loader'</span>,</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-comment">// 'css-loader',</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-string">'@viewfly/devtools/scoped-css-webpack-loader'</span></div><div class="tb-code-line">&nbsp;&nbsp;]</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">JavaScript</span></div></pre>
<p>安装 scoped-css 扩展包</p><pre lang="" theme="starry" class="tb-pre tb-pre-hide-line-number"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line">npm install @viewfly/scoped-css</div></div><span class="tb-pre-lang"></span></div></pre>
<p>准备工作做完后，就可以正式编写代码了。</p>
<h2>应用作用域 CSS</h2>
<p>要使 webpack 正确编译出作用域 CSS，我们约定，css 文件名必须为：[name].scoped.css，也可以为其它通用的预处理器文件，如 a.scoped.scss、b.scoped.less、c.scoped.stylus 等。</p>
<p>如果命名不符合规则，scoped-css-webpack-loader 将会作为普通样式表文件解析。</p>
<p>在组件中使用作用域样式，只需要调用 withScopedCSS 函数，并传入作用域样式表返回的 ID 传给渲染函数即可。</p><pre lang="CSS" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-comment">/* app.scoped.css */</span></div><div class="tb-code-line"><span class="tb-hl-selector">.box</span>&nbsp;{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;width: 200px;</div><div class="tb-code-line">&nbsp;&nbsp;height: 40px;</div><div class="tb-code-line">&nbsp;&nbsp;color: red;</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">CSS</span></div></pre><pre lang="Jsx" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;{'{'} withScopedCSS {'}'}&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'@viewfly/scoped-css'</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;css&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'./app.scoped.css'</span></div><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;<span class="tb-hl-function">withScopedCss</span>(css, () =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">class</span>="<span class="tb-hl-attr-value">box</span>"&gt;text&lt;/<span class="tb-hl-tag">box</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;{'}'})</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p>编译后的样式表为：</p><pre lang="CSS" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-selector">.box[data-vf-xxxx]</span>&nbsp;{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;width: 200px;</div><div class="tb-code-line">&nbsp;&nbsp;height: 40px;</div><div class="tb-code-line">&nbsp;&nbsp;color: red;</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">CSS</span></div></pre>
<p>渲染出的 DOM 节点也会添加上作用域属性</p><pre lang="HTML" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line">&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">class</span>="<span class="tb-hl-attr-value">box</span>"<span class="tb-hl-tag">&nbsp;</span><span class="tb-hl-attr-name">data-vf-xxxx</span>&gt;text&lt;/<span class="tb-hl-tag">div</span>&gt;</div></div><span class="tb-pre-lang">HTML</span></div></pre>
<h2>绑定多个样式表</h2>
<p>一般场景下，我们只需绑定一个样式表即可，但你还是可以绑定多个模块化样式表。</p><pre lang="Jsx" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;home&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'./home.scoped.css'</span></div><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;common&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'./common.scoped.css'</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">App</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">// 绑定多个样式表</span></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;<span class="tb-hl-function">withScopedCss</span>([home, common], () =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">class</span>="<span class="tb-hl-attr-value">box</span>"&gt;text&lt;/<span class="tb-hl-tag">box</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;{'}'})</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Jsx</span></div></pre>
<p><br/></p></div>
    )
  }
}